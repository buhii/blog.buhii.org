<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>pikku pukki - software</title><link href="http://blog.buhii.org/" rel="alternate"></link><link href="http://blog.buhii.org/feeds/software.atom.xml" rel="self"></link><id>http://blog.buhii.org/</id><updated>2015-11-23T14:49:00+09:00</updated><entry><title>messnamed</title><link href="http://blog.buhii.org/messnamed.html" rel="alternate"></link><published>2015-11-23T14:49:00+09:00</published><updated>2015-11-23T14:49:00+09:00</updated><author><name>buhii</name></author><id>tag:blog.buhii.org,2015-11-23:/messnamed.html</id><summary type="html">&lt;p&gt;Max6 では（環境の制約で Max7 が使えないのだ）ヘビーに js object を使っているのだけど、最近まで &lt;a href="https://docs.cycling74.com/max5/vignettes/js/jsglobal.html"&gt;messnamed&lt;/a&gt; という関数を知らなかった。今までは以下のように js object の outlet からパッチコードを引いて使っていた。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;outlet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;しかしこの方法だと他にもいろいろなところに情報を送ろうとするたびに js object の outlet を増やさないとならず outlet の管理やパッチコードのメンテナンスが大変になる。&lt;/p&gt;
&lt;p&gt;&lt;img alt="messnamed1" src="/images/messnamed1.png"&gt;&lt;/p&gt;
&lt;p&gt;ひとつの方法としては、js object の下に route object を配置してそこで分岐させる方法が考えられる。&lt;/p&gt;
&lt;p&gt;&lt;img alt="messnamed2" src="/images/messnamed2.png"&gt;&lt;/p&gt;
&lt;p&gt;どの outlet がどこに対応しているかを js object で管理する必要がなくなるので多少マシになる。しかしパッチコードの複雑さは解決していない。そこで messnamed の出番だ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;messnamed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;target1 …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Max6 では（環境の制約で Max7 が使えないのだ）ヘビーに js object を使っているのだけど、最近まで &lt;a href="https://docs.cycling74.com/max5/vignettes/js/jsglobal.html"&gt;messnamed&lt;/a&gt; という関数を知らなかった。今までは以下のように js object の outlet からパッチコードを引いて使っていた。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;outlet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;しかしこの方法だと他にもいろいろなところに情報を送ろうとするたびに js object の outlet を増やさないとならず outlet の管理やパッチコードのメンテナンスが大変になる。&lt;/p&gt;
&lt;p&gt;&lt;img alt="messnamed1" src="/images/messnamed1.png"&gt;&lt;/p&gt;
&lt;p&gt;ひとつの方法としては、js object の下に route object を配置してそこで分岐させる方法が考えられる。&lt;/p&gt;
&lt;p&gt;&lt;img alt="messnamed2" src="/images/messnamed2.png"&gt;&lt;/p&gt;
&lt;p&gt;どの outlet がどこに対応しているかを js object で管理する必要がなくなるので多少マシになる。しかしパッチコードの複雑さは解決していない。そこで messnamed の出番だ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;messnamed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;target1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nx"&gt;messnamed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;target2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hoge&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;fuga&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nx"&gt;messnamed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;target3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bazz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;と書いておき、 &lt;code&gt;r targetObject&lt;/code&gt; と receive object を作っておけばパッチコードを繋げることなく直接 js から情報を送ることができる。&lt;/p&gt;
&lt;p&gt;&lt;img alt="messnamed3" src="/images/messnamed3.png"&gt;&lt;/p&gt;
&lt;p&gt;さてこれで問題は解決した。欠点としては receive object がどこから接続されているかという情報が欠落してしまうことだ。receive object をダブルクリックすればどこから send されているか分かるが js 内からの情報はさすがにトレースされない。&lt;/p&gt;
&lt;p&gt;&lt;img alt="messnamed4" src="/images/messnamed4.png"&gt;&lt;/p&gt;
&lt;p&gt;どの情報をパッチコード経由で送るか、js 内部に隠蔽して送るかはちょっと考える必要がある。パッチコードで送りづらいものは js 内部で送ればいいと思うけど、Max ユーザの人たちはどのように使い分けているのだろう？&lt;/p&gt;</content><category term="Max"></category></entry><entry><title>JUCE</title><link href="http://blog.buhii.org/juce.html" rel="alternate"></link><published>2015-11-07T10:38:00+09:00</published><updated>2015-11-07T10:38:00+09:00</updated><author><name>buhii</name></author><id>tag:blog.buhii.org,2015-11-07:/juce.html</id><summary type="html">&lt;p&gt;HN で &lt;a href="https://news.ycombinator.com/item?id=10512248"&gt;Juce C++ framework reaches v4 with live-coding environment&lt;/a&gt; という thread が上がっていた。JUCE はそういえば Max で使われているんだっけと思って調べてみると &lt;a href="http://www.juce.com/case-studies/max"&gt;Building Max with JUCE&lt;/a&gt; という記事があった。この記事によると、もともと Max/MSP は Mac OS 用のソフトウェアだったが、Windows 環境にポートするにあたって Mac2Win という Windows 上で Mac 環境をエミュレーションするソフトウェアを使ったらしい。ただライセンスが高額なのとエミュレーション環境が pre-Mac OS X だったのがきっかけで他の cross-platform framework を探していたところ JUCE を見つけたそうだ。会社ではこのような GUI …&lt;/p&gt;</summary><content type="html">&lt;p&gt;HN で &lt;a href="https://news.ycombinator.com/item?id=10512248"&gt;Juce C++ framework reaches v4 with live-coding environment&lt;/a&gt; という thread が上がっていた。JUCE はそういえば Max で使われているんだっけと思って調べてみると &lt;a href="http://www.juce.com/case-studies/max"&gt;Building Max with JUCE&lt;/a&gt; という記事があった。この記事によると、もともと Max/MSP は Mac OS 用のソフトウェアだったが、Windows 環境にポートするにあたって Mac2Win という Windows 上で Mac 環境をエミュレーションするソフトウェアを使ったらしい。ただライセンスが高額なのとエミュレーション環境が pre-Mac OS X だったのがきっかけで他の cross-platform framework を探していたところ JUCE を見つけたそうだ。会社ではこのような GUI アプリケーションを書くときは Qt が人気なのだけど、HN でも評判は良さそうだし、C++ の weirdness なところを隠蔽した良い設計という感想もあったので、必要になったときは思い出してみようと思う。&lt;/p&gt;</content><category term="JUCE"></category><category term="Max"></category></entry><entry><title>Mountain Car</title><link href="http://blog.buhii.org/mountain-car.html" rel="alternate"></link><published>2015-11-03T07:23:00+09:00</published><updated>2015-11-03T07:23:00+09:00</updated><author><name>buhii</name></author><id>tag:blog.buhii.org,2015-11-03:/mountain-car.html</id><summary type="html">&lt;p&gt;強化学習について以前から調査している。&lt;a href="http://buhii.github.com/mountaincar.js/index.html"&gt;Mountain Car&lt;/a&gt; という testbed を書いてみた。 neural net (&lt;a href="http://cs.stanford.edu/people/karpathy/convnetjs/"&gt;ConvNetJS&lt;/a&gt;) + Q-learning でしばらく実装していたが、どうもうまくいかない。よく調べたら &lt;a href="https://webdocs.cs.ualberta.ca/~sutton/RL-FAQ.html#backpropagation"&gt;"I am doing RL with a backpropagation neural network and it doesn't work; what should I do?"&lt;/a&gt;という FAQ があるではないか。結局 CMAC (tile coding) を使ってようやく動くようになった。難しい。DQN でうまく動作させるにはどういうコツが必要なのだろう？ hidden layers の設定や学習率等のパラメータを適切に指定すれば動くのかもしれないが、いまのところうまくいっていない。&lt;/p&gt;
&lt;p&gt;最終的に Cycling74 の Max 上で動作させる予定である …&lt;/p&gt;</summary><content type="html">&lt;p&gt;強化学習について以前から調査している。&lt;a href="http://buhii.github.com/mountaincar.js/index.html"&gt;Mountain Car&lt;/a&gt; という testbed を書いてみた。 neural net (&lt;a href="http://cs.stanford.edu/people/karpathy/convnetjs/"&gt;ConvNetJS&lt;/a&gt;) + Q-learning でしばらく実装していたが、どうもうまくいかない。よく調べたら &lt;a href="https://webdocs.cs.ualberta.ca/~sutton/RL-FAQ.html#backpropagation"&gt;"I am doing RL with a backpropagation neural network and it doesn't work; what should I do?"&lt;/a&gt;という FAQ があるではないか。結局 CMAC (tile coding) を使ってようやく動くようになった。難しい。DQN でうまく動作させるにはどういうコツが必要なのだろう？ hidden layers の設定や学習率等のパラメータを適切に指定すれば動くのかもしれないが、いまのところうまくいっていない。&lt;/p&gt;
&lt;p&gt;最終的に Cycling74 の Max 上で動作させる予定である。&lt;a href="https://github.com/grrrwaaa/maxcpp"&gt;maxcpp&lt;/a&gt; というので Max external object を C++ で記述することができて良い。でも &lt;s&gt;同じ人が書いた&lt;/s&gt; &lt;a href="http://grrrr.org/research/software/flext/"&gt;flext&lt;/a&gt; で Max と PureData どちらも対応したライブラリが生成できるので、より便利かも。調べてみると &lt;a href="https://ccrma.stanford.edu/~larrywu/course/220a/final/final-proj.html"&gt;このプロジェクト (220A Final Project) &lt;/a&gt;などで使われているようだ。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[2015-11-05 追記]&lt;/em&gt; &lt;a href="https://github.com/grrrwaaa/maxcpp"&gt;maxcpp&lt;/a&gt; と &lt;a href="http://grrrr.org/research/software/flext/"&gt;flext&lt;/a&gt; は違う人が書いたものだった。似たようなアカウント名だったのでうっかり間違えてしまった。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[2015-11-07 追記]&lt;/em&gt; &lt;a href="http://mlg.eng.cam.ac.uk/pilco/"&gt;PILCO&lt;/a&gt; というのを見つけた。&lt;/p&gt;</content><category term="Reinforcement Learning"></category><category term="Max"></category></entry><entry><title>bookshelf planner 4</title><link href="http://blog.buhii.org/bookshelf-planner-4.html" rel="alternate"></link><published>2015-10-04T02:38:00+09:00</published><updated>2015-10-04T02:38:00+09:00</updated><author><name>buhii</name></author><id>tag:blog.buhii.org,2015-10-04:/bookshelf-planner-4.html</id><summary type="html">&lt;p&gt;&lt;a href="https://pypi.python.org/pypi/ortoolpy/"&gt;ortoolpy&lt;/a&gt; を参考に１枚板のギロチンカットを解くプログラムを書いてみた（&lt;a href="https://gist.github.com/buhii/8d7f5cb058fe9b6c97f2"&gt;packer.py&lt;/a&gt;）。&lt;a href="http://plotdevice.io/"&gt;PlotDevice&lt;/a&gt; で以下の様な画像を描画する。&lt;/p&gt;
&lt;p&gt;&lt;img alt="packer_color.gif" src="/images/packer_color.gif"&gt;&lt;/p&gt;
&lt;p&gt;問題についてもう少し調べた。今回の問題は two-dimensional bin packing problem (2DBPP)、その中でも複数の種類のコンテナを扱う 2D variable-sized bin packing problem (2DVSBPP) と呼ばれているもののようだ。&lt;a href="http://www.cis.umac.mo/~fstasp/paper/ejor2014.pdf"&gt;"A hybrid heuristic algorithm for the 2D variable-sized bin packing problem"&lt;/a&gt; という論文を見つけた。この論文をもとに実装していけば良さそうだ。&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://pypi.python.org/pypi/ortoolpy/"&gt;ortoolpy&lt;/a&gt; を参考に１枚板のギロチンカットを解くプログラムを書いてみた（&lt;a href="https://gist.github.com/buhii/8d7f5cb058fe9b6c97f2"&gt;packer.py&lt;/a&gt;）。&lt;a href="http://plotdevice.io/"&gt;PlotDevice&lt;/a&gt; で以下の様な画像を描画する。&lt;/p&gt;
&lt;p&gt;&lt;img alt="packer_color.gif" src="/images/packer_color.gif"&gt;&lt;/p&gt;
&lt;p&gt;問題についてもう少し調べた。今回の問題は two-dimensional bin packing problem (2DBPP)、その中でも複数の種類のコンテナを扱う 2D variable-sized bin packing problem (2DVSBPP) と呼ばれているもののようだ。&lt;a href="http://www.cis.umac.mo/~fstasp/paper/ejor2014.pdf"&gt;"A hybrid heuristic algorithm for the 2D variable-sized bin packing problem"&lt;/a&gt; という論文を見つけた。この論文をもとに実装していけば良さそうだ。&lt;/p&gt;</content><category term="bookshelf planner"></category></entry><entry><title>bookshelf planner 3</title><link href="http://blog.buhii.org/bookshelf-planner-3.html" rel="alternate"></link><published>2015-09-30T07:03:00+09:00</published><updated>2015-09-30T07:03:00+09:00</updated><author><name>buhii</name></author><id>tag:blog.buhii.org,2015-09-30:/bookshelf-planner-3.html</id><summary type="html">&lt;p&gt;カットする際に板が削られてしまうのは、カットする板の大きさをその分大きく見なせば基本的には良さそう。ギロチンカットを続けて、最後に残った板がちょうど必要な板のサイズだった場合とか例外はあるけど。&lt;/p&gt;</summary><content type="html">&lt;p&gt;カットする際に板が削られてしまうのは、カットする板の大きさをその分大きく見なせば基本的には良さそう。ギロチンカットを続けて、最後に残った板がちょうど必要な板のサイズだった場合とか例外はあるけど。&lt;/p&gt;</content><category term="bookshelf planner"></category></entry><entry><title>bookshelf planner 2</title><link href="http://blog.buhii.org/bookshelf-planner-2.html" rel="alternate"></link><published>2015-09-27T01:55:00+09:00</published><updated>2015-09-27T01:55:00+09:00</updated><author><name>buhii</name></author><id>tag:blog.buhii.org,2015-09-27:/bookshelf-planner-2.html</id><summary type="html">&lt;p&gt;&lt;a href="/bookshelf-planner.html"&gt;前回書いた&lt;/a&gt;問題について少し調べた。どうやら &lt;a href="https://en.wikipedia.org/wiki/Cutting_stock_problem"&gt;Cutting stock problem&lt;/a&gt; と呼ばれる最適化問題のようだ。紙や木材、板金等から必要な部品をなるべく無駄がないようにカットするという問題で、応用範囲も広く問題のバリエーションも複数あるようだ。&lt;/p&gt;
&lt;p&gt;解こうとしている問題は論文 (&lt;a href="https://www.fernuni-hagen.de/wirtschaftswissenschaft/download/beitraege/db425.pdf"&gt;A Genetic Algorithm for the Two-Dimensional Knapsack Problem with Rectangular Pieces&lt;/a&gt;) をざっくり読んだ感じだと 2D の guillotine cutting constraint （ギロチンカット制約）付きに近いようだ。ギロチンカットというのは名前の通り板の端から端まで切ってしまう（途中で止めたりしない）もので、近所の東急ハンズの木材加工もこのやり方だったと思う。部品の orientation を気にするかどうかという制約（たぶん木材の繊維方向とか素材の異方性を考慮する場合）もあるようだけど、今回は気にしなくて良いと思う。ただ、カットする際に板が少し削られてしまうという制約はまだ見つけられていないし、さらに東急ハンズで売っている合板 (container) は数種類あるので、これはなんとかする必要がある。&lt;/p&gt;
&lt;p&gt;問題自体は焼きなまし法とか遺伝的アルゴリズム、タブーサーチ等いろいろな方法で解かれているようだ。今回は別に厳密解にこだわっていないので、実時間でまあまあな解が出せればよい …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="/bookshelf-planner.html"&gt;前回書いた&lt;/a&gt;問題について少し調べた。どうやら &lt;a href="https://en.wikipedia.org/wiki/Cutting_stock_problem"&gt;Cutting stock problem&lt;/a&gt; と呼ばれる最適化問題のようだ。紙や木材、板金等から必要な部品をなるべく無駄がないようにカットするという問題で、応用範囲も広く問題のバリエーションも複数あるようだ。&lt;/p&gt;
&lt;p&gt;解こうとしている問題は論文 (&lt;a href="https://www.fernuni-hagen.de/wirtschaftswissenschaft/download/beitraege/db425.pdf"&gt;A Genetic Algorithm for the Two-Dimensional Knapsack Problem with Rectangular Pieces&lt;/a&gt;) をざっくり読んだ感じだと 2D の guillotine cutting constraint （ギロチンカット制約）付きに近いようだ。ギロチンカットというのは名前の通り板の端から端まで切ってしまう（途中で止めたりしない）もので、近所の東急ハンズの木材加工もこのやり方だったと思う。部品の orientation を気にするかどうかという制約（たぶん木材の繊維方向とか素材の異方性を考慮する場合）もあるようだけど、今回は気にしなくて良いと思う。ただ、カットする際に板が少し削られてしまうという制約はまだ見つけられていないし、さらに東急ハンズで売っている合板 (container) は数種類あるので、これはなんとかする必要がある。&lt;/p&gt;
&lt;p&gt;問題自体は焼きなまし法とか遺伝的アルゴリズム、タブーサーチ等いろいろな方法で解かれているようだ。今回は別に厳密解にこだわっていないので、実時間でまあまあな解が出せればよい。&lt;a href="http://qiita.com/Tsutomu-KKE@github/items/0ac9bd564ae9f91285d7"&gt;この記事&lt;/a&gt;ではギロチンカットによる二次元パッキング問題を &lt;a href="https://pypi.python.org/pypi/ortoolpy/0.0.17"&gt;ortoolpy&lt;/a&gt; というライブラリで解く方法が紹介されている。あと &lt;a href="https://pythonhosted.org/PuLP/"&gt;PuLP&lt;/a&gt; という最適化ライブラリも調べる価値がありそうだ。&lt;/p&gt;</content><category term="bookshelf planner"></category></entry><entry><title>bookshelf planner</title><link href="http://blog.buhii.org/bookshelf-planner.html" rel="alternate"></link><published>2015-09-23T15:45:00+09:00</published><updated>2015-09-23T15:45:00+09:00</updated><author><name>buhii</name></author><id>tag:blog.buhii.org,2015-09-23:/bookshelf-planner.html</id><summary type="html">&lt;p&gt;数年前に東京に引っ越して以来 11.0m&lt;sup&gt;2&lt;/sup&gt; の 1R に住んでいる。部屋が狭いため収納が問題である。隙間なく家具を並べるには、ちょうど良いサイズのものを探さなければならない。&lt;/p&gt;
&lt;p&gt;そんな中、友達から棚の作り方を教わった。流れとしては、まず欲しい棚を設計する。そこから必要な板のサイズを調べる。ホームセンターに行き、大きな合板を購入し、板をカットしてもらう。最後にネジやくぎを駆使して組み立てる。さっそく近所の東急ハンズでラワン合板を調達し、欲しいサイズの棚を作った。木ネジを使って固定したので、引っ越しする時も分解して組み立て直すことができる。&lt;/p&gt;
&lt;p&gt;&lt;img alt="blueprint" src="/images/bookshelf-planner001.jpg"&gt;&lt;/p&gt;
&lt;p&gt;ところで、作りたい棚に対してどのサイズの合板を何枚購入するか少し悩んだ。たとえば東急ハンズでは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;300 x 450 [mm]&lt;/li&gt;
&lt;li&gt;450 x 600 [mm]&lt;/li&gt;
&lt;li&gt;450 x 910 [mm]&lt;/li&gt;
&lt;li&gt;910 x 910 [mm]&lt;/li&gt;
&lt;li&gt;910 x 1,820 [mm]&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;と様々なサイズの合板があるため、どのように選べばコストを抑えられるか少し考えなければならない。また合板自体の厚さやカット時に約 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;数年前に東京に引っ越して以来 11.0m&lt;sup&gt;2&lt;/sup&gt; の 1R に住んでいる。部屋が狭いため収納が問題である。隙間なく家具を並べるには、ちょうど良いサイズのものを探さなければならない。&lt;/p&gt;
&lt;p&gt;そんな中、友達から棚の作り方を教わった。流れとしては、まず欲しい棚を設計する。そこから必要な板のサイズを調べる。ホームセンターに行き、大きな合板を購入し、板をカットしてもらう。最後にネジやくぎを駆使して組み立てる。さっそく近所の東急ハンズでラワン合板を調達し、欲しいサイズの棚を作った。木ネジを使って固定したので、引っ越しする時も分解して組み立て直すことができる。&lt;/p&gt;
&lt;p&gt;&lt;img alt="blueprint" src="/images/bookshelf-planner001.jpg"&gt;&lt;/p&gt;
&lt;p&gt;ところで、作りたい棚に対してどのサイズの合板を何枚購入するか少し悩んだ。たとえば東急ハンズでは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;300 x 450 [mm]&lt;/li&gt;
&lt;li&gt;450 x 600 [mm]&lt;/li&gt;
&lt;li&gt;450 x 910 [mm]&lt;/li&gt;
&lt;li&gt;910 x 910 [mm]&lt;/li&gt;
&lt;li&gt;910 x 1,820 [mm]&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;と様々なサイズの合板があるため、どのように選べばコストを抑えられるか少し考えなければならない。また合板自体の厚さやカット時に約 3mm 板が削られることも考慮する必要がある。このような問題をブラウザ上で計算する仕組みをつくれば、もしかしたら楽しいかもしれない。欲しい棚を &lt;a href="http://threejs.org/"&gt;three.js&lt;/a&gt; で描画し、収納したい物のサイズや棚自体のコスト等の制約条件をユーザに選んでもらって、自動的に計算してくれるもの。たぶんナップサック問題などの線形（整数？）計画問題の solver が使えるのではないかと思う。試しに調べてみると JavaScript で書かれた &lt;a href="https://github.com/IainNZ/SimplexJS"&gt;Simplex method の実装&lt;/a&gt; を見つけた。棚の数が異常に多いエグい本棚なども解くことができれば楽しそうだ。そのうち作ってみようと思う。&lt;/p&gt;</content><category term="idea"></category><category term="bookshelf planner"></category><category term="DIY"></category></entry></feed>